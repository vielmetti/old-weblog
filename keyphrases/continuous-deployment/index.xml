<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vacuum weblog from Edward Vielmetti</title>
    <link>http://vielmetti.github.io/keyphrases/continuous-deployment/index.xml</link>
    <description>Recent content on Vacuum weblog from Edward Vielmetti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://vielmetti.github.io/keyphrases/continuous-deployment/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Snap CI</title>
      <link>http://vielmetti.github.io/post/2015/2015-09-22-snap-ci/</link>
      <pubDate>Tue, 22 Sep 2015 07:00:00 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-09-22-snap-ci/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://snap-ci.com&#34;&gt;Snap CI&lt;/a&gt; is a cloud-based continuous integration system. Like
Travis CI, which I have written about &lt;a href=&#34;http://vielmetti.github.io/post/2015/2015-09-16-travis-ci/&#34;&gt;here&lt;/a&gt;,
it lives in the cloud, lets you run programs triggered by GitHub commits, and
offers a testing environment for free for open source projects which lets you
familiarize yourself with the system before deciding to pay for it for your
non-open-source efforts.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking at all of these tools now because this weblog is now managed through
a process that involves checking things into Github, which makes it completely
suitable for automation for common tasks every time I save a file. (Spell checking,
link checking, really any kind of quality control you can imagine reducing to
a tiny shell script.)&lt;/p&gt;

&lt;p&gt;Like Travis CI, Snap CI lets you automate the build process. Where it diverges
(and where it&amp;rsquo;s interesting) is that the build process is only the first part of
a multi-stage pipeline that includes deployment at the end of the task only when
a set of human decisions have been made as to whether the thing you made is ready
to be shared.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#34;https://blog.snap-ci.com/blog/2014/07/22/why-snapci-and-travisci-are-not-same-thing/&#34;&gt;Snap CI blog post&lt;/a&gt;
on why Travis CI and Snap CI are not the same thing is from Snap CI and it&amp;rsquo;s a useful
overview.&lt;/p&gt;

&lt;p&gt;The downside of multi-stage pipelines for deployment is that they are very hard to
automate correctly, and very hard to demonstrate correct behavior with open source
projects that generally struggle to have any automated test facilities at all. So
while Travis CI is a very good fit for open source components (and has attracted a
whole sub-industry of writing &lt;code&gt;.travis.yml&lt;/code&gt; files to support those), it really doesn&amp;rsquo;t
have the whole &amp;ldquo;continuous deployment&amp;rdquo; pattern sorted out. And while Snap CI looks
like it would be great for saying &amp;ldquo;once we&amp;rsquo;re happy with this, push it out to the world&amp;rdquo;,
that setup is not easy to pick up simply by inspecting other projects that have done it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>