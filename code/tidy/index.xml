<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tidy on Vacuum weblog from Edward Vielmetti</title>
    <link>http://vielmetti.github.io/code/tidy/</link>
    <description>Recent content in Tidy on Vacuum weblog from Edward Vielmetti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Sep 2015 00:05:00 -0400</lastBuildDate>
    <atom:link href="http://vielmetti.github.io/code/tidy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Old code and old tools</title>
      <link>http://vielmetti.github.io/post/2015/2015-09-14-old-code-and-old-tools/</link>
      <pubDate>Mon, 14 Sep 2015 00:05:00 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-09-14-old-code-and-old-tools/</guid>
      <description>&lt;p&gt;One of the problems with old codebases is that they are missing
modern tooling for automated builds, automated testing, and the
like.&lt;/p&gt;

&lt;p&gt;A second problem with old code is that the maintainers (absent
modern tooling) may not know or recognize what dependencies they
have.&lt;/p&gt;

&lt;p&gt;If an old package is not mostly self-contained, it&amp;rsquo;s likely to
have dependencies on other old code. This makes it hard to build,
as those older dependencies have either gone offline or have mutated
so that the old package doesn&amp;rsquo;t work with the new releases.&lt;/p&gt;

&lt;p&gt;To confound the matter even more, the newer tools for automated
builds, automated tests and so forth have their own sets of complex
dependencies, so much so that unless you are around some team that
has already absorbed these systems that you are unlikely to grasp
all of their deeply interconnected complexities.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s easy to cascade into a deep chasm of interlocking dependencies,
yielding enough complexity in the build process to frustrated people
who really care more about the code than how it&amp;rsquo;s packaged for distribution.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;I&amp;rsquo;ve been working this weekend on &lt;code&gt;tidy-html5&lt;/code&gt;. It has a Makefile
that&amp;rsquo;s generated by CMake, and its documentation is built with
a combination of xsltproc and Doxygen. As dependencies go that&amp;rsquo;s
not too bad, but the problem starts because the codebase lay dormant
for a couple of years, and somewhere between three and six years
of net development and build tooling efforts have passed it by.&lt;/p&gt;

&lt;p&gt;There was no Dockerfile for the project, so I wrote one to see if I
could get it to build and could understand all of the build dependencies.
That took a dozen tries, but eventually something went through to
completion.&lt;/p&gt;

&lt;p&gt;The first thing I noted was that it not only depended on CMake but
also a particularly relatively recent version of CMake. Ditto for
Doxygen - not any elderly Doxygen will do, but only a relatively
recent build. Doxygen has its own dependencies, lots of them - about
a gigabyte of code to download and install.&lt;/p&gt;

&lt;p&gt;Next was to pick up on a previous effort to build the whole thing under
Travis CI. Now I have a relatively old build system that doesn&amp;rsquo;t
have these old dependencies so I have to drag them in, and not only
drag in some version but a particularly new version.&lt;/p&gt;

&lt;p&gt;Dependencies satisfied, it&amp;rsquo;s time to build. I want this to work on my
Raspberry Pi, so I build it there, and discover that the version of
Doxygen there is too old (oops) so it doesn&amp;rsquo;t build the docs at all,
never mind the cheery message from the build script that claims
&amp;ldquo;TidyLib API documentation has been built&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Next, to test. Does it pass all of its tests? Well, there is a test
directory with a bunch of test cases, but the documentation says things
like&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Of course some of the tests were to say avoid a segfault found.
Other tests were to visually compare the original input test file
in a browser, with how the new output displayed in a browser. This
is a purely VISUAL compare, and can not be done in code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Frankly, a test that can&amp;rsquo;t be done in code is one that I can&amp;rsquo;t run
in finite time. I build all of the tests, diff them with the reference
directory, and hope that the differences (there are a few) aren&amp;rsquo;t fatal.&lt;/p&gt;

&lt;p&gt;You see where this is going&amp;hellip;&lt;/p&gt;

&lt;p&gt;Frankly, it&amp;rsquo;s hard to get all of the tooling right. Travis CI has all of
its own quirks, and you have to set up a build correctly to get correct
build completion results. Once the build happens, you want some sort of
test harness to take all of these test cases and turn them into red lights
and green lights on your screen, and I don&amp;rsquo;t have that yet. Building
binaries is yet another task - one project contributor put together a
Jenkins install to take on that task.  And so forth.&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;The piece of this that I care about is twofold. &lt;code&gt;tidy&lt;/code&gt; as it stands now
is frozen in 2009, and that&amp;rsquo;s before HTML5. &lt;code&gt;tidy-html5&lt;/code&gt; is caught in flux,
with a successful project rescue to get it to build at all, but not yet
the full-on automation and test infrastructure that projects like &lt;code&gt;docker&lt;/code&gt;
or &lt;code&gt;node.js&lt;/code&gt; have that allow for ferocious parallel development with
reasonable test and integration coverage.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tidy&lt;/code&gt; project is very old (20 yrs), and if it&amp;rsquo;s going to pass
a full suite of automated tests on every check-in for every platform,
that&amp;rsquo;s going to take some consolidated effort - both by people who
care about the code (but not so much how it&amp;rsquo;s packaged) and by people
who care about the packaging (so that they can use the code). Not
only does the code need to evolve, but the build tools around the
code need to move forward.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>using &#34;tidy&#34; in a screen scraping pipeline</title>
      <link>http://vielmetti.github.io/post/2008/2008-12-26-using-tidy-in-a-screen-scraping-pipeline/</link>
      <pubDate>Fri, 26 Dec 2008 14:24:24 +0000</pubDate>
      
      <guid>http://vielmetti.github.io/post/2008/2008-12-26-using-tidy-in-a-screen-scraping-pipeline/</guid>
      <description>&lt;p&gt;When the AATA mobile ride track is up, I have a script that runs periodically to decode the web pages and turn them into data.&amp;#0160; The pages are formatted for humans, so I need to do screen scraping on them to reconstruct the original data values.&lt;/p&gt;&lt;p&gt;There are a lot of tools for screen scraping, with each of them appealing to a programmer who has a certain world view of the web and how things are put together.&amp;#0160; The tool that I find myself recommending when someone who sounds like a programmer asks is &lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;Beautiful Soup&lt;/a&gt; (for python) or &lt;a href=&#34;http://www.crummy.com/software/RubyfulSoup/&#34;&gt;Rubyful Soup&lt;/a&gt; (for ruby), in part at least because the coder&amp;#39;s attitude toward pragmatism is appropriate for the task at hand:&lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;You didn&amp;#39;t write that awful page. You&amp;#39;re just trying to get some
data out of it. Right now, you don&amp;#39;t really care what HTML is
supposed to look like.&lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;Neither does this parser.&amp;#0160;&lt;/p&gt;&lt;p&gt;Rubyful Soup&amp;#39;s page says &amp;quot;no longer maintained, try hpricot instead&amp;quot;; I looked for hpricot and got some 404s.&amp;#0160; Not sure really what&amp;#39;s up with that.&lt;/p&gt;&lt;p&gt;As for what I really do, rather than what I recommend, well you have to understand that most of the code that I write that actually does anything useful is less than a page of text and mostly is full of regular expressions.&amp;#0160;&amp;#0160; HTML in its unadorned state is mostly resistant to simple-minded regex parsing, but if you constrain the world enough you can get most data out of most pages by running the page through a preprocessor that normalizes it into something sane.&lt;/p&gt;&lt;p&gt;My favorite for that effort is the old school &amp;quot;&lt;a href=&#34;http://tidy.sourceforge.net/&#34;&gt;HTML Tidy&lt;/a&gt;&amp;quot; application, which has a zillion options by now for taking your weird web pages and making them pass syntax checks.&amp;#0160;&lt;/p&gt;&lt;p&gt;Thus the source of the main loop for the &amp;quot;mobile ride guide decoder&amp;quot;:&lt;/p&gt;&lt;p&gt;&lt;span style=&#34;font-size: 11px; font-family: Courier;&#34;&gt;curl -s -o $TMP/route.5.html http://mobile.theride.org/rideguide_m.asp?route=5&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 11px; font-family: Courier;&#34;&gt;tidy -f /dev/null -q -w 0 -o $TMP/route.5.tidy.html $TMP/route.5.html&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 11px; font-family: Courier;&#34;&gt;perl ./mobiletocsv.pl &amp;lt; $TMP/route.5.tidy.html &amp;gt;&amp;gt; route.5.log.csv&lt;/span&gt;&lt;/p&gt;&lt;p&gt;and the &amp;quot;mobiletocsv&amp;quot; perl script is very simple minded&lt;/p&gt;&lt;p&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;#!perl&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;while(&amp;lt;&amp;gt;) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /AS OF (\d+:\d\d)/ &amp;amp;&amp;amp; ($curtime = $1);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; $realtime = `date +%H:%M`;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; chop $realtime;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d+) min behind/ &amp;amp;&amp;amp; ($late = $1);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d+) min ahead/ &amp;amp;&amp;amp; ($late = -$1);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d+) on time/i &amp;amp;&amp;amp; ($late = 0);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d\d\d) to (Ann Arbor|Ypsilanti)/ &amp;amp;&amp;amp; ($busno = $1, $dest = $2);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d\d\d) (OutBound|Loop)/ &amp;amp;&amp;amp; ($busno = $1, $dest = $2);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /^@ (.*)&amp;lt;br&amp;gt;/ &amp;amp;&amp;amp; ($curloc = $1);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /^(.*) (\d+:\d\d)/ &amp;amp;&amp;amp; ($newloc = $1, $timepoint = $2,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160; print &amp;quot;$realtime,$curtime,$late,$busno,$dest,$curloc,$newloc,$timepoint\n&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;quot;);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;It&amp;#39;s probably not resistant to aggressively malformed input, and I simply don&amp;#39;t run it when the result is &amp;quot;please check your timetable for times&amp;quot;.&amp;#0160; &lt;/p&gt;&lt;p&gt;The first and second iterations that I wrote of this code tried to do it all without any tidy step, and it was hard especially because I had to try to parse syntax and parse data in the same step.&amp;#0160; This version is compact enough that it might reasonably be the jumping off point for future enhancements.&amp;#0160; &lt;/p&gt;&lt;p&gt;still waiting for the bus data to come back....&lt;span style=&#34;font-family: Courier;&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Courier;&#34;&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>