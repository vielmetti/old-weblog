<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Awk on Vacuum weblog from Edward Vielmetti</title>
    <link>http://vielmetti.github.io/code/awk/</link>
    <description>Recent content in Awk on Vacuum weblog from Edward Vielmetti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Jul 2015 16:11:41 -0400</lastBuildDate>
    
	<atom:link href="http://vielmetti.github.io/code/awk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Levenshtein distance for approximate match</title>
      <link>http://vielmetti.github.io/post/2015/2015-07-17-levenshtein-distance-for-approximate-match/</link>
      <pubDate>Fri, 17 Jul 2015 16:11:41 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-07-17-levenshtein-distance-for-approximate-match/</guid>
      <description>The problem, simply stated, is that of typoes and inconsistent spelling and pluraliziation. Let&amp;rsquo;s say you have a collection of text that you want to annotate with some metadata, like categories and tags. You don&amp;rsquo;t want to set aside ahead of time exactly which tags you want to use, but you want to catch through some test or lint step that you&amp;rsquo;ve done something wrong by typing &amp;ldquo;apples&amp;rdquo; into a field that really has &amp;ldquo;apple&amp;rdquo; most of the time.</description>
    </item>
    
    <item>
      <title>using &#34;jq&#34; for command line web applications for civic data</title>
      <link>http://vielmetti.github.io/post/2014/2014-10-05-using-jq-for-command-line-web-applications-for-civic-data/</link>
      <pubDate>Sun, 05 Oct 2014 09:03:34 +0000</pubDate>
      
      <guid>http://vielmetti.github.io/post/2014/2014-10-05-using-jq-for-command-line-web-applications-for-civic-data/</guid>
      <description>One of the tools that I rediscovered and have been really happy for having done so is &amp;ldquo;jq&amp;rdquo;, a command line tool that bills itself as &amp;ldquo;awk for json&amp;rdquo;.
I&amp;rsquo;ve been writing awk code since 1985, and some limited subset of it is something that I know really, really well. awk, however, is from the punchcard era, and as such it likes to deal with records that are all on one line each.</description>
    </item>
    
    <item>
      <title>Joyent Manta: map/reduce for Unix natives</title>
      <link>http://vielmetti.github.io/post/2013/2013-06-27-joyent-manta-mapreduce-for-unix-natives/</link>
      <pubDate>Thu, 27 Jun 2013 00:58:42 +0000</pubDate>
      
      <guid>http://vielmetti.github.io/post/2013/2013-06-27-joyent-manta-mapreduce-for-unix-natives/</guid>
      <description>Joyent has released Manta, a computing environment that includes a powerful map/reduce system which leverages native Unix commands. Unlike a Hadoop world where you have to spin up a Java environment to get anything done, Manta makes map/reduce as simple as possible for those of us who know the Unix shell pretty well.
Some examples may be useful.
for n in $HOME/doc/books/* do wc -l $n &amp;gt;&amp;gt; $TMP/wc-tmp done awk &amp;#39;{ t += $1 } END { print t }&amp;#39; &amp;lt; $TMP/wc-tmp  has an equivalent in Manta as something like</description>
    </item>
    
    <item>
      <title>Amelanchier (Shadbush, Juneberry, Sugar Plum) inventory for Ann Arbor, 2009</title>
      <link>http://vielmetti.github.io/post/2009/2009-07-03-amelanchier-shadbush-juneberry-sugar-plum-inventory-for-ann-arbor-2009/</link>
      <pubDate>Fri, 03 Jul 2009 00:47:55 +0000</pubDate>
      
      <guid>http://vielmetti.github.io/post/2009/2009-07-03-amelanchier-shadbush-juneberry-sugar-plum-inventory-for-ann-arbor-2009/</guid>
      <description>Here&amp;#39;s a complete list of where all of the Amelanchier (juneberry, shadbush, sugar plum depending on where you are from) trees are on the public streets in Ann Arbor.&amp;#0160; The complete inventory shows 356 trees, each geocoded; rather than try to pin them on a map, this is by street name in alphabetical order, with quite a bit of duplicates eliminated.
The whole program to do this is
grep -i Amelanchier trees09.</description>
    </item>
    
  </channel>
</rss>