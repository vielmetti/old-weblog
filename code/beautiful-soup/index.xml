<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vacuum weblog from Edward Vielmetti</title>
    <link>http://vielmetti.github.io/code/beautiful-soup/index.xml</link>
    <description>Recent content on Vacuum weblog from Edward Vielmetti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://vielmetti.github.io/code/beautiful-soup/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>using &#34;tidy&#34; in a screen scraping pipeline</title>
      <link>http://vielmetti.github.io/post/2008/2008-12-26-using-tidy-in-a-screen-scraping-pipeline/</link>
      <pubDate>Fri, 26 Dec 2008 14:24:24 +0000</pubDate>
      
      <guid>http://vielmetti.github.io/post/2008/2008-12-26-using-tidy-in-a-screen-scraping-pipeline/</guid>
      <description>&lt;p&gt;When the AATA mobile ride track is up, I have a script that runs periodically to decode the web pages and turn them into data.&amp;#0160; The pages are formatted for humans, so I need to do screen scraping on them to reconstruct the original data values.&lt;/p&gt;&lt;p&gt;There are a lot of tools for screen scraping, with each of them appealing to a programmer who has a certain world view of the web and how things are put together.&amp;#0160; The tool that I find myself recommending when someone who sounds like a programmer asks is &lt;a href=&#34;http://www.crummy.com/software/BeautifulSoup/&#34;&gt;Beautiful Soup&lt;/a&gt; (for python) or &lt;a href=&#34;http://www.crummy.com/software/RubyfulSoup/&#34;&gt;Rubyful Soup&lt;/a&gt; (for ruby), in part at least because the coder&amp;#39;s attitude toward pragmatism is appropriate for the task at hand:&lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;You didn&amp;#39;t write that awful page. You&amp;#39;re just trying to get some
data out of it. Right now, you don&amp;#39;t really care what HTML is
supposed to look like.&lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;Neither does this parser.&amp;#0160;&lt;/p&gt;&lt;p&gt;Rubyful Soup&amp;#39;s page says &amp;quot;no longer maintained, try hpricot instead&amp;quot;; I looked for hpricot and got some 404s.&amp;#0160; Not sure really what&amp;#39;s up with that.&lt;/p&gt;&lt;p&gt;As for what I really do, rather than what I recommend, well you have to understand that most of the code that I write that actually does anything useful is less than a page of text and mostly is full of regular expressions.&amp;#0160;&amp;#0160; HTML in its unadorned state is mostly resistant to simple-minded regex parsing, but if you constrain the world enough you can get most data out of most pages by running the page through a preprocessor that normalizes it into something sane.&lt;/p&gt;&lt;p&gt;My favorite for that effort is the old school &amp;quot;&lt;a href=&#34;http://tidy.sourceforge.net/&#34;&gt;HTML Tidy&lt;/a&gt;&amp;quot; application, which has a zillion options by now for taking your weird web pages and making them pass syntax checks.&amp;#0160;&lt;/p&gt;&lt;p&gt;Thus the source of the main loop for the &amp;quot;mobile ride guide decoder&amp;quot;:&lt;/p&gt;&lt;p&gt;&lt;span style=&#34;font-size: 11px; font-family: Courier;&#34;&gt;curl -s -o $TMP/route.5.html http://mobile.theride.org/rideguide_m.asp?route=5&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 11px; font-family: Courier;&#34;&gt;tidy -f /dev/null -q -w 0 -o $TMP/route.5.tidy.html $TMP/route.5.html&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 11px; font-family: Courier;&#34;&gt;perl ./mobiletocsv.pl &amp;lt; $TMP/route.5.tidy.html &amp;gt;&amp;gt; route.5.log.csv&lt;/span&gt;&lt;/p&gt;&lt;p&gt;and the &amp;quot;mobiletocsv&amp;quot; perl script is very simple minded&lt;/p&gt;&lt;p&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;#!perl&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;while(&amp;lt;&amp;gt;) {&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /AS OF (\d+:\d\d)/ &amp;amp;&amp;amp; ($curtime = $1);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; $realtime = `date +%H:%M`;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; chop $realtime;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d+) min behind/ &amp;amp;&amp;amp; ($late = $1);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d+) min ahead/ &amp;amp;&amp;amp; ($late = -$1);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d+) on time/i &amp;amp;&amp;amp; ($late = 0);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d\d\d) to (Ann Arbor|Ypsilanti)/ &amp;amp;&amp;amp; ($busno = $1, $dest = $2);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /(\d\d\d) (OutBound|Loop)/ &amp;amp;&amp;amp; ($busno = $1, $dest = $2);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /^@ (.*)&amp;lt;br&amp;gt;/ &amp;amp;&amp;amp; ($curloc = $1);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160; /^(.*) (\d+:\d\d)/ &amp;amp;&amp;amp; ($newloc = $1, $timepoint = $2,&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160; print &amp;quot;$realtime,$curtime,$late,$busno,$dest,$curloc,$newloc,$timepoint\n&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;&amp;quot;);&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-size: 10px; font-family: Courier;&#34;&gt;}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;It&amp;#39;s probably not resistant to aggressively malformed input, and I simply don&amp;#39;t run it when the result is &amp;quot;please check your timetable for times&amp;quot;.&amp;#0160; &lt;/p&gt;&lt;p&gt;The first and second iterations that I wrote of this code tried to do it all without any tidy step, and it was hard especially because I had to try to parse syntax and parse data in the same step.&amp;#0160; This version is compact enough that it might reasonably be the jumping off point for future enhancements.&amp;#0160; &lt;/p&gt;&lt;p&gt;still waiting for the bus data to come back....&lt;span style=&#34;font-family: Courier;&#34;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&#34;font-family: Courier;&#34;&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>