<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vacuum weblog from Edward Vielmetti</title>
    <link>http://vielmetti.github.io/code/raspberry-pi/index.xml</link>
    <description>Recent content on Vacuum weblog from Edward Vielmetti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://vielmetti.github.io/code/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Managing a Raspberry Pi OpenVPN with Salt</title>
      <link>http://vielmetti.github.io/post/2015/2015-09-07-managing-raspberry-pi-openvpn-with-salt/</link>
      <pubDate>Mon, 07 Sep 2015 00:45:00 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-09-07-managing-raspberry-pi-openvpn-with-salt/</guid>
      <description>&lt;p&gt;When you successfully install something complex, and then you fail
to document one small thing about how you did it, the inclination is
to over-document once you get it working again; thus, this expository
account of managing a set of Raspberry Pi devices using the &amp;ldquo;salt&amp;rdquo;
system. It&amp;rsquo;s not a complete start to finish writeup, just a pointer to
the bits that I had forgotten.&lt;/p&gt;

&lt;p&gt;This is mostly experimental at this point, and the collection of devices
is relatively small. I am pretty convinced that the Pi 2 has plenty of
gas to do more things than most people will try to do, but the original
Pi is slow enough and limited enough to perhaps make this scheme impractical.&lt;/p&gt;

&lt;p&gt;When it works, you have a set of Pi&amp;rsquo;s in various locations, all networked
together into an OpenVPN configuration.&lt;/p&gt;

&lt;p&gt;First to read is &lt;a href=&#34;http://garthwaite.org/virtually-secure-with-openvpn-pillars-and-salt.html&#34;&gt;Virtually secure with openvpn, pillars, and salt&lt;/a&gt; which
goes over the structure and motivation and design for an OpenVPN
network that answers this problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How do I use salt to create and install the openvpn and client specific config files for each minion &amp;ndash;on demand?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you follow Dan Garthwaite&amp;rsquo;s design you get a reasonable
approach - when you bring up a new client you get a new key
generated, and on the server you run &lt;code&gt;salt-key -a&lt;/code&gt; to accept the
new one.&lt;/p&gt;

&lt;p&gt;This leaves only the problem of bootstrapping on the Pi&amp;rsquo;s themselves.
The version of &amp;lsquo;salt-minion&amp;rsquo; that&amp;rsquo;s available from the default
Debian system is very ancient, so that&amp;rsquo;s useless. What you want
can be found at
&lt;a href=&#34;http://servernetworktech.com/2014/05/setup-debian-saltstack-minion-single-command/&#34;&gt;Setup a Debian Saltstack minion with a single command&lt;/a&gt;
on the Server Network Tech blog; it brings in a new Debian
source list from Salt so that the bootstrap is easier.&lt;/p&gt;

&lt;p&gt;(I realize this isn&amp;rsquo;t a start to finish tutorial, just a few points
of clarification for bringing up new nodes once you have the whole
Salt environment running; sorry about that.)&lt;/p&gt;

&lt;p&gt;The one thing I have left to do to make the setup more airtight is
to automate the process of locking down the sshd_config so that &amp;ldquo;root&amp;rdquo;
and &amp;ldquo;pi&amp;rdquo; can&amp;rsquo;t login from far away, so that I can keep their default
passwords but restrict access to console access only.&lt;/p&gt;

&lt;p&gt;Not mentioned here is that these Pi configuraiton are all on top of
the Hypriot setup so that they can (and do) run Docker. Though Docker
on the original Pi with salt-minion running doesn&amp;rsquo;t leave a ton of
space spare for actual work to be done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RRDTool v1.5.4 on Raspberry Pi</title>
      <link>http://vielmetti.github.io/post/2015/2015-08-26-rrdtool-on-raspberry-pi/</link>
      <pubDate>Wed, 26 Aug 2015 17:15:00 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-08-26-rrdtool-on-raspberry-pi/</guid>
      <description>&lt;p&gt;The second in a series of efforts to get a suitable database for
the task.&lt;/p&gt;

&lt;p&gt;The challenge is that there&amp;rsquo;s a lot of data out there that changes
all the time, and you want to gather it, make sure it&amp;rsquo;s sane, squirrel
it away for later analysis, put together a pretty chart so that you
can spot check it, feed it into other systems not yet fully dreamed
of to cause actions, and so on. It&amp;rsquo;s the &amp;ldquo;big data&amp;rdquo; problem in that
you have sensors that throw off a lot of data exhaust, and it&amp;rsquo;s the
&amp;ldquo;internet of things&amp;rdquo; problem because mostly you&amp;rsquo;re looking at things
with data and not say imagery or lots of freeform text.&lt;/p&gt;

&lt;p&gt;Phase one of this effort was wrestling MongoDB into service, which
ended up being only a handful of lines of code; but the concern expressed
was the Mongo though fun and easy for small projects gets messy for
big ones, and there&amp;rsquo;s good reason not to succumb to its siren song.
The other reason to stop using Mongo when I did was that it really
doesn&amp;rsquo;t love the Raspberry Pi architecture. Since there were only really
a very few lines of code, and since that code works on my Mac, no time
lost - but time to move on.&lt;/p&gt;

&lt;p&gt;Phase two is a look at RRDtool, a &amp;ldquo;round robin&amp;rdquo; database very often used
for network management efforts. One of the nice things about a round robin
database is that the database itself is at its maximum size when you
create it, and it doesn&amp;rsquo;t grow - rather, it cycles out the old data
at whatever time resolution you want to get rid of it. With that in
mind you can have a single database with 10 years worth of daily averages
and a whole year of minute-by-minute data and it hardly takes up any
room at all - perfect for the sort of &amp;ldquo;data logger&amp;rdquo; applications that
I find myself in the middle of.&lt;/p&gt;

&lt;p&gt;If you do &lt;code&gt;apt-get install rrdtool&lt;/code&gt; on the Pi you get a working
copy of RRDtool 1.4.7, compiled in 2012. That&amp;rsquo;s pretty long in the
tooth, so I decided to pull down v1.5.4 from the
&lt;a href=&#34;http://oss.oetiker.ch/rrdtool/pub/?M=D&#34;&gt;RRDtool download area&lt;/a&gt;. The release notes note
dependencies as follows&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libpango1.0-dev libxml2-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and once you have those pulled down the build is not fast but not
difficult.&lt;/p&gt;

&lt;p&gt;Pushing data into RRDtool is as simple as a shell script run out of
cron. The first data point I&amp;rsquo;m graphing is &amp;ldquo;total spaces free in the
Ann Arbor DDA parking garages&amp;rdquo;, and I&amp;rsquo;m collecting that on two machines -
my Mac when it&amp;rsquo;s running, and the Pi at all times. A second graph
I want to capture is some really basic weather information, and a
third is inside-the-machine environmental sensing starting with the
system temperature of the Pi.&lt;/p&gt;

&lt;p&gt;It was really useful to make the first round of this be Mongo, because
with Mongo you really don&amp;rsquo;t have to decide anything when you set things up -
just dump in raw JSON documents and hope for the best.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://vielmetti.github.io/images/parking.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;RRDtool graph of available parking in downtown Ann Arbor&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
  </channel>
</rss>