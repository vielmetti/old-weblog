<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on tracker</title>
    <link>http://vielmetti.github.io/categories/docker/</link>
    <description>Recent content in Docker on tracker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2015 02:18:01 -0400</lastBuildDate>
    <atom:link href="http://vielmetti.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bringing up Node-RED and mosquitto under &#34;docker compose&#34; on a Raspberry Pi</title>
      <link>http://vielmetti.github.io/post/2015/2015-07-13-bringing-up-node-red-and-mosquitto-under-docker-compose-on-a-raspberry-pi/</link>
      <pubDate>Mon, 13 Jul 2015 02:18:01 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-07-13-bringing-up-node-red-and-mosquitto-under-docker-compose-on-a-raspberry-pi/</guid>
      <description>&lt;p&gt;Progress, actually quite a lot of it:&lt;/p&gt;

&lt;p&gt;The problem, neatly stated. Docker is good for bringing up single services (&#34;microservices&#34;), but sometimes your application needs more than one thing running for the whole thing to work. Enter &#34;docker compose&#34;, formerly &#34;fig&#34;, which automates the process of running various Docker commands in the right order with the right arguments all driven from a configuration file. As described by their documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Compose is a tool for defining and running complex applications with Docker. With Compose, you define a multi-container application in a single file, then spin your application up in a single command which does everything that needs to be done to get it running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The particular task I have in front of me is launching Node-RED and mosquitto (an MQTT broker) together on a Raspberry Pi 2 which is running Hypriot and Docker. Most of the background for &lt;em&gt;why&lt;/em&gt; that&#39;s a relevant task is at this post on Hypriot, &lt;a href=&#34;http://blog.hypriot.com/post/docker-compose-nodejs-haproxy/&#34;&gt;How to use Docker Compose to run complex multi container apps on your Raspberry Pi&lt;/a&gt;, which I dutifully and successfully managed to run all of the examples from. &lt;/p&gt;

&lt;p&gt;Emboldened by this I tried to get Wordpress running with MySQL but got stuck because of a variety of things (not the least of which was some over-enthusiastic documentation that downplayed the complexity of that task, and the lack of a Pi-specific Wordpress Docker images). But having had the taste of what might be I carried on until I managed to get something to work for what I really wanted: Node-RED running alongside mosquitto so that I could have a local MQTT broker to talk to.&lt;/p&gt;

&lt;pre&gt;
nodered:
  image: nieleyde/rpi2-nodered
  command: flows.json
  volumes:
    - /home/pi/node-red:/root/.node-red
  ports: 
    - &#34;1880:1880&#34;
  links:
    - mosquitto

mosquitto:
  image: nieleyde/rpi-mosquitto
  ports:
    - &#34;1883:1883&#34;
&lt;/pre&gt;

&lt;p&gt;Some subtleties to note:&lt;/p&gt;

&lt;p&gt;The nieleyde/rpi2-nodered runs on the Pi 2; there&#39;s a corresponding nieleyde/rpi-nodered for the Pi. Both are ARM images. I haven&#39;t yet tweaked this to run on x86, but if you do, you&#39;ll need to update the &#34;image&#34; stanzas everywhere.&lt;/p&gt;

&lt;p&gt;The &#34;command&#34; and &#34;volumes&#34; stanzas in the nodered configuration serve to make Docker mount a subdirectory on the host machine where the flows.json file is stored; this makes changes to the configuration persistent. If you want a read-only configuration, you&#39;ll need to change this; I haven&#39;t gotten that far yet. It might also make sense to have a data volume container, but again I&#39;m not there yet.&lt;/p&gt;

&lt;p&gt;The &#34;mosquitto&#34; configuration is extremely bare bones and runs the default config, which is wide open. I haven&#39;t gotten far enough to replace the config file with something better, but that&#39;s an obvious next step.&lt;/p&gt;

&lt;p&gt;From within Node-RED you refer to this internal MQTT server at hostname &#34;mosquitto&#34;, port &#34;1883&#34;. If the links stanza was changed to &#34;mqtt&#34; and the mosquitto section was changed to &#34;mqtt&#34; you&#39;d then refer to the MQTT server at hostname &#34;mqtt&#34;.&lt;/p&gt;

&lt;p&gt;For further reading:&lt;/p&gt;

&lt;p&gt;An issue open on Niel Eyde&#39;s rpi-nodered Github, &lt;a href=&#34;https://github.com/nieleyde/rpi-nodered/issues/5&#34;&gt;documentation for how to extend this image with your own nodes and flows&lt;/a&gt;, where I&#39;m working some of this out.&lt;/p&gt;

&lt;p&gt;On the Node-RED Github, &lt;a href=&#34;https://github.com/node-red/node-red/issues/603&#34;&gt;Support for Docker install for Node-RED&lt;/a&gt;, which is epic and helpful in many ways.&lt;/p&gt;

&lt;p&gt;The essential &lt;a href=&#34;http://blog.hypriot.com/&#34;&gt;Hypriot weblog&lt;/a&gt;, specifically the aforementioned &lt;a href=&#34;http://blog.hypriot.com/post/docker-compose-nodejs-haproxy/&#34;&gt;Docker Compose examples&lt;/a&gt; and the &lt;a href=&#34;https://github.com/hypriot/compose&#34;&gt;Hypriot Docker Compose&lt;/a&gt; Github repository.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker 1.7.0 issues: problems with Mac and boot2docker, ARM, Ubuntu, and disk size of images</title>
      <link>http://vielmetti.github.io/post/2015/2015-06-26-docker-170-issues-problems-with-mac-and-boot2docker-arm-and-disk-size-of-images/</link>
      <pubDate>Fri, 26 Jun 2015 19:50:46 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-06-26-docker-170-issues-problems-with-mac-and-boot2docker-arm-and-disk-size-of-images/</guid>
      <description>&lt;p&gt;Docker 1.7.0 has been released into the wild. Every .0 release of software should be expected to have some issues, no matter how good the QA and automated test process. Here&#39;s what to expect if you&#39;re getting Docker 1.7.0 up and running.&lt;/p&gt;

&lt;h3&gt;boot2docker on Mac&lt;/h3&gt;

&lt;p&gt;On the Mac, with boot2docker: &lt;a href=&#34;https://github.com/boot2docker/boot2docker/issues/938&#34;&gt;Docker certs not valid with 1.7 upgrade&lt;/a&gt; is issue 938 on boot2docker. The symptom is a message like this&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An error occurred trying to connect: Get https://192.168.59.103:2376/v1.19/containers/json: x509: certificate is valid for 127.0.0.1, 10.0.2.15, not 192.168.59.103&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and restarting docker on the VM with &lt;code&gt;boot2docker ssh sudo /etc/init.d/docker restart&lt;/code&gt; fixes it, at least temporarily. Read through the issue on github to see the full diagnosis - as best I understand it, eth1 is not up when certificates are generated, hence the cert not valid error.&lt;/p&gt;

&lt;h3&gt;Raspberry Pi or any other ARM system&lt;/h3&gt;

&lt;p&gt;On a Raspberry Pi: &lt;a href=&#34;https://github.com/docker/docker/issues/14184&#34;&gt;Docker 1.7 on RaspberryPI : &#34;socket operation on non-socket&#34;&lt;/a&gt; is issue 14184 on docker. The symptom is a message like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[tki@anzu ~]$ docker start redis
  Error response from daemon: Cannot start container redis: socket operation on non-socket
  Error: failed to start containers: [redis]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The error flushed out a whole set of people running Docker on ARM on a variety of platforms, all having similar issues. If you&#39;re running a Scaleway C1, ODROID C1, ODROID XU3-Lite, Utilite Pro, Cubox 4x4, and all flavors of Raspberry Pi or Pi 2 you&#39;ll see this. &#34;When using --net host the container starts&#34; is the report, but port forwarding fails to work in that case.&lt;/p&gt;

&lt;h3&gt;Ubuntu: problems with statically compiled Docker binaries&lt;/h3&gt;

&lt;p&gt;The issue is &lt;a href=&#34;https://github.com/docker/docker/issues/14035&#34;&gt;Ubuntu 15.04 vivid can not start docker 1.7.0&lt;/a&gt;, docker issue 14035. The relevant bits of the error message are&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ERRO[0000] Udev sync is not supported. This will lead to unexpected behavior, data loss and errors. For more information, see https://docs.docker.com/reference/commandline/cli/#daemon-storage-driver-option &lt;/p&gt;
  
  &lt;p&gt;ERRO[0000] [graphdriver] prior storage driver &#34;devicemapper&#34; failed: driver not supported &lt;/p&gt;
  
  &lt;p&gt;FATA[0000] Error starting daemon: error initializing graphdriver: driver not supported &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a long discussion, culminating in &lt;code&gt;In the end, removing /var/lib/docker/devicemapper/ will fix the issue&lt;/code&gt;, but people are also rolling back to 1.6.2. &lt;/p&gt;

&lt;h3&gt;Ubuntu on x86: large file sizes&lt;/h3&gt;

&lt;p&gt;A report that &lt;a href=&#34;https://forums.docker.com/t/docker-1-7-0-is-using-huge-amount-of-disk-space/2046&#34;&gt;Docker 1.7.0 is using huge amounts of disk space&lt;/a&gt; appears on the Docker forum, item 2046. &lt;a href=&#34;https://github.com/docker/docker/issues/14204&#34;&gt;Pulling image fills disk/image size is huge, version 1.7.0&lt;/a&gt; is issue 14204 on Docker. Not much insight into this one yet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a few notes from Dockercon 2015, as seen via Twitter</title>
      <link>http://vielmetti.github.io/post/2015/2015-06-24-a-few-notes-from-dockercon-2015-as-seen-via-twitter/</link>
      <pubDate>Wed, 24 Jun 2015 13:27:13 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-06-24-a-few-notes-from-dockercon-2015-as-seen-via-twitter/</guid>
      <description>&lt;p&gt;The annual conference for Docker, &lt;a href=&#34;http://www.dockercon.com/&#34;&gt;Dockercon&lt;/a&gt;, has been going on. A few highlights from the event as seen through Twitter - I was not there to attend it.&lt;/p&gt;

&lt;p&gt;Docker is real on the Raspberry Pi through support for the ARM processor. &lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Awesome live demo of Docker on a Raspberry Pi by &lt;a href=&#34;https://twitter.com/Quintus23M&#34;&gt;@Quintus23M&lt;/a&gt; in the &lt;a href=&#34;https://twitter.com/hashtag/dockercon?src=hash&#34;&gt;#dockercon&lt;/a&gt; closing keynote. &lt;a href=&#34;http://t.co/DJfBtpcYws&#34;&gt;pic.twitter.com/DJfBtpcYws&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bridget Kromhout (@bridgetkromhout) &lt;a href=&#34;https://twitter.com/bridgetkromhout/status/613495958089785344&#34;&gt;June 23, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;More details from the presenter, &lt;a href=&#34;http://blog.hypriot.com/post/dockercon2015/&#34;&gt;Hypriot-Demo and challenge at DockerCon 2015&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Docker&#39;s plumbing is being spun out as &lt;a href=&#34;http://blog.docker.com/2015/06/runc/&#34;&gt;runC&lt;/a&gt;. The new infrastructure supports migration of containers from one server to another, illustrated through a Quake III demo.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;QuakeIII in a container, migrated seamlessly from Singapore to Amsterdam to London using &lt;a href=&#34;https://twitter.com/hashtag/runc?src=hash&#34;&gt;#runc&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/hashtag/dockercon?src=hash&#34;&gt;#dockercon&lt;/a&gt; &lt;a href=&#34;http://t.co/no3c0G1MDY&#34;&gt;pic.twitter.com/no3c0G1MDY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Paul V. Novarese (@pvnovarese) &lt;a href=&#34;https://twitter.com/pvnovarese/status/613499654219526144&#34;&gt;June 24, 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For more highlights, see the &lt;a href=&#34;http://venturebeat.com/2015/06/22/everything-announced-at-dockercon-2015/&#34;&gt;Venturebeat roundup of Dockercon 2015&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker&#39;s new RunC doesn&#39;t (yet?) work on Mac OS X</title>
      <link>http://vielmetti.github.io/post/2015/2015-06-22-dockers-new-runc-doesnt-yet-work-on-mac-os-x-/</link>
      <pubDate>Mon, 22 Jun 2015 16:53:10 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-06-22-dockers-new-runc-doesnt-yet-work-on-mac-os-x-/</guid>
      <description>&lt;p&gt;Docker has a new runtime environment that they are releasing called &lt;a href=&#34;http://blog.docker.com/2015/06/runc/&#34;&gt;runC&lt;/a&gt;. It&#39;s a &#34;lightweight universal plumbing&#34; that tries to encapsulate all of the Docker dependencies and infrastructure. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To build Docker we have re-used large quantities of plumbing: Linux, Go, lxc, aufs, lvm, iptables, virtualbox, vxlan, mesos, etcd, consul, systemd… the list goes on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because of Docker&#39;s start on Linux systems, it&#39;s been tricky to get it running under Mac OS X. Some tries to make it work depend on setting up virtual machines (with the likes of boot2docker) which makes it work at the cost of performance and flexibility. Docker on OS X has not been exceptionally easy though it does work once you commit to doing all of your Docker server work inside a VM&lt;/p&gt;

&lt;p&gt;runC would be an answer to the problem of native Docker on OSX X, one might hope, but as of its first release it doesn&#39;t work. The first of what is probably many hurdles is the extensive use of the clone(2) system call instead of fork(2). This &lt;a href=&#34;http://files.meetup.com/10602292/See%20Docker%20from%20the%20Perspective%20of%20Linux%20Process.pdf&#34;&gt;presentation from Allen Sun at DaoCloud&lt;/a&gt; goes into the details of Docker&#39;s use of clone(2) from the perspective of Linux processes. It is notable that the OS X &#34;Darwin&#34; kernel doesn&#39;t have clone(2), and it&#39;s as far as I can tell not readily possible to mimic all of clone&#39;s semantics strictly by using fork in clever ways.&lt;/p&gt;

&lt;p&gt;An open issue on Github is tracking &lt;a href=&#34;https://github.com/opencontainers/runc/issues/9&#34;&gt;Build fails on Mac OS X 10.9&lt;/a&gt;. I don&#39;t see an easy fix without work by Apple on their kernel.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Node-RED on a Raspberry Pi with Docker and Hypriot</title>
      <link>http://vielmetti.github.io/post/2015/2015-05-23-running-node-red-on-a-raspberry-pi-with-docker-and-hypriot/</link>
      <pubDate>Sat, 23 May 2015 02:06:33 -0400</pubDate>
      
      <guid>http://vielmetti.github.io/post/2015/2015-05-23-running-node-red-on-a-raspberry-pi-with-docker-and-hypriot/</guid>
      <description>&lt;p&gt;My goal for the week was to empty out my inbox sufficiently that I would be able to make progress on some programming tasks that are hard to do when there&#39;s distractions. The inbox got all the way down to zero, and that meant that there was a chunk of evening time suitable for hacking. Happy to report that the result of this is Node-RED running on a Raspberry Pi under Docker on top of Hypriot. A word of explanation of how this all works in detail is too much, but here&#39;s where I got the parts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.hypriot.com/getting-started-with-docker-on-your-arm-device/&#34;&gt;Hypriot&#39;s gettting started guide&lt;/a&gt; brings you up to speed on getting Docker running on your ARM device (e.g. your Raspberry Pi). They have bootable images that you can download and burn to SD card, and from there you load up applications from Docker.&lt;/p&gt;

&lt;p&gt;Hypriot has a &lt;a href=&#34;https://gitter.im/hypriot/talk&#34;&gt;chat window&lt;/a&gt; on Gitter, so you can pop in and there will be occasionally people to assist. Best to do things European time.&lt;/p&gt;

&lt;p&gt;Docker&#39;s &lt;a href=&#34;https://hub.docker.com/&#34;&gt;DockerHub&lt;/a&gt; is a one stop shop for packaged applications. When you&#39;re running on the Pi, you&#39;ll want to seek out versions with &#39;rpi&#39; or &#39;arm&#39; in their names as they have likely been adapted for that system.&lt;/p&gt;

&lt;p&gt;I ended up pulling Niel Eyde&#39;s Raspberry Pi versions of Node-RED from DockerHub as &lt;a href=&#34;https://registry.hub.docker.com/u/nieleyde/rpi-nodered/&#34;&gt;nieleyde/rpi-nodered&lt;/a&gt;. It has all sorts of interesting modules that I had not previously built.&lt;/p&gt;

&lt;p&gt;Node-RED is at 0.10.6 at this writing. Its &lt;a href=&#34;http://nodered.org/docs/hardware/raspberrypi.html&#34;&gt;Raspberry Pi support&lt;/a&gt; includes hardware support using &lt;a href=&#34;http://wiringpi.com/&#34;&gt;WiringPi&lt;/a&gt; to access the GPIO pins. &lt;/p&gt;

&lt;p&gt;Node-RED currently supports Node.JS 0.10. Node.JS and IO.JS have &lt;a href=&#34;http://sdtimes.com/node-js-and-io-js-to-merge-under-node-js-foundation/&#34;&gt;merged forces&lt;/a&gt; after a fork, which means hopefully development will start to be sane again.&lt;/p&gt;

&lt;p&gt;That all said I am not sure I have everything I need yet but as a leap forward it&#39;s pretty good!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>