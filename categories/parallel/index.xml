<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vacuum weblog from Edward Vielmetti</title>
    <link>http://vielmetti.github.io/categories/parallel/index.xml</link>
    <description>Recent content on Vacuum weblog from Edward Vielmetti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://vielmetti.github.io/categories/parallel/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Optical Character Recognition with parallel computing?</title>
      <link>http://vielmetti.github.io/post/2009/2009-02-24-optical-character-recognition-with-parallel-computing/</link>
      <pubDate>Tue, 24 Feb 2009 01:20:58 +0000</pubDate>
      
      <guid>http://vielmetti.github.io/post/2009/2009-02-24-optical-character-recognition-with-parallel-computing/</guid>
      <description>&lt;p&gt;Some references to collect here on the use of general-purpose graphic processors in OCR.&amp;#0160; Nominally, you run some kind of MapReduce based algorithm with a GPGPU over some image, and out spits text much faster than any ordinary processor of any speed; of course, there are lots of details to attend to.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;http://www.eecs.berkeley.edu/Research/Projects/Data/102604.html&#34;&gt;From Berkeley EECS: Algorithms and Frameworks for OCR and Content-based Image Retrieval&lt;/a&gt;&lt;/p&gt;

&lt;p style=&#34;margin-left: 40px;&#34;&gt;Jike Chong, Bryan Christopher Catanzaro, Narayanan Sundaram, Fares Hedayati and Kurt Keutzer&lt;/p&gt;

&lt;p style=&#34;margin-left: 40px;&#34;&gt;A new breed of general-purpose manycore computing platform is
emerging. Exemplary examples include the Niagara from Sun Microsystems,
the G80 from Nvidia, the Cell from IBM, and the up-coming Larrabee from
Intel. These manycore processors each pack 8-32 relatively simple cores
on a chip, capable of supporting up to 100s of threads, and boast
tremendous potential peak single-chip performances up to the range of
Tera-FLOPS. However, traditional algorithms and applications in many
domains cannot take advantage of much of the parallelism provided by
these platforms. &lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;The ParLab at Berkeley was recently founded in part to help
meet this acute need for novel algorithmic approaches to unleash the
performance potentials of emerging manycore platforms for a wide range
of application domains. It proposes to concentrate on analyzing the
communication and computation patterns (or Dwarfs) of important classes
of algorithms underlying modern application domains, and develop
techniques to efficiently parallelize them for the general purpose
manycore platforms.
&lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;We concentrate on the domain of image recognition and
retrieval, leveraging the Intel PIRO content-based image retrieval
framework as a motivating application. Specifically, we study the
parallelization of classification algorithms for machine learning, and
develop parallelization techniques to improve the performance of these
algorithms and applications on the emerging manycore platforms.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;http://www.bv2.co.uk/?p=281&#34;&gt;Here&amp;#39;s a discussion of an OCR system that uses the CUDA libraries called cocr&lt;/a&gt;&lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;The cuda implementation allows for exceptionally fast image
manipulation, cleaning and segmentation before being presented to the
template based ocr system.&amp;#0160; Traditional cpu based ocr systems are very
slow, especially in the image rotation, cleaning etc departments and
although cocr is by no means a complete ocr package it is orders of
magnitude faster than the various cpu based ones I’ve tried. With a bit
more work and an additional of a neural network ocr it could easily
become a system able to do greater than realtime ocr’ing.&amp;#0160; Neural
networks are extremely well suited to GPU implementations due to their
inherit parallelism. I will post more snippets and modules of the
system here over the coming weeks.&lt;/p&gt;&lt;p&gt;I wasn&amp;#39;t able to find any evidence that the &lt;a href=&#34;http://code.google.com/p/ocropus/&#34;&gt;ocropus &lt;/a&gt;OCR system that Google has used and released is using any parallel computing mechanisms, so this still looks like &amp;quot;gee, it should work for someone, if you can throw a PhD student or two at it.&amp;quot;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>massively parallel systems of massively parallel machines</title>
      <link>http://vielmetti.github.io/post/2009/2009-02-17-massively-parallel-systems-of-massively-parallel-machines/</link>
      <pubDate>Tue, 17 Feb 2009 15:36:36 +0000</pubDate>
      
      <guid>http://vielmetti.github.io/post/2009/2009-02-17-massively-parallel-systems-of-massively-parallel-machines/</guid>
      <description>&lt;p&gt;Here&amp;#39;s some notes about parallel computing, going in two directions at the same time.&amp;#0160; In one direction you have tools like Map/Reduce or Hadoop managing the work of parceling a problem into many pieces and then coordinating the collection of those pieces.&amp;#0160; In another direction you have graphics chips being turned into interesting general purpose parallel computing chips that can do some specific operations very fast.&lt;/p&gt;&lt;p&gt;It&amp;#39;s mostly in the form of clippings, in part because I don&amp;#39;t have a whole story yet, just the fragments.&lt;/p&gt;&lt;p&gt;from&lt;a href=&#34;http://www.p16blog.com/p16/2008/07/supercomputing-for-the-masses-nvidia-cuda.html&#34;&gt; P16: Practical Progress - Supercomputing for the masses&lt;/a&gt;&lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;One thing CUDA doesn&amp;#39;t provide is a way to manage and process
massive datasets. The cards have somewhat limited memory, and you have
to write an app that runs on the host and feeds the card with data. For
search applications like topic clustering -- which I&amp;#39;d like to use this
for -- CUDA alone doesn&amp;#39;t provide an answer.&lt;/p&gt;

&lt;p style=&#34;margin-left: 40px;&#34;&gt;Perhaps it would make sense eventually to use Hadoop plus CUDA --
write your map/reduce tasks in CUDA, and rely on Hadoop to distribute
data around a cluster of Nvidia-accelerated boxes?&lt;/p&gt;&lt;p&gt;find23.net -&lt;a href=&#34;http://find23.net/2008/12/11/map-reduce-on-gpus/&#34;&gt; Map Reduce on GPUs&lt;/a&gt;&lt;/p&gt;&lt;p style=&#34;margin-left: 40px;&#34;&gt;A fellow at the german hadoop user meeting (Thanks to Isabel that
organized that again) pointed me to the fact that GPUs on a graphic
cards basically working like server grids.&lt;br /&gt;
He mentioned there are some research papers in this field. I spend some
time to read through what I could found and it was quite interesting.
Let me citate some of the facts from the two most interesting papers:&lt;/p&gt;
&lt;p style=&#34;margin-left: 40px;&#34;&gt;+ “A Map Reduce Framework for Programming Graphics Processors” by
Bryan Catanzaro, Narayanan Sundaram and Kurt Keutzer UC, Berkeley&lt;br /&gt;
+ “Mars: A MapReduce Framework on Graphics Processors” by Bingsheng He, Wenbin Fang, Qiong Luo, Naga K. Govindaraju, Tuyong Wang&lt;/p&gt;&lt;p&gt;and, hiding at the end of a long set of searches, is &lt;a href=&#34;http://www.cloudera.com/&#34;&gt;Cloudera&lt;/a&gt;, a company&lt;/p&gt;
&lt;p class=&#34;large&#34; style=&#34;margin-left: 40px;&#34;&gt;&lt;span&gt;Hadoop&lt;/span&gt; is the popular open source
implementation of MapReduce, a powerful tool designed for the detailed
analysis and transformation of very large data sets. Hadoop enables you
to explore complex data in its native form, using custom analyses
tailored to the information and questions you have.&lt;/p&gt;
&lt;p class=&#34;large blue&#34; style=&#34;margin-left: 40px;&#34;&gt;&lt;span&gt;Cloudera&lt;/span&gt; can help you install, configure and run Hadoop for large-scale data processing and analysis.&lt;/p&gt;&lt;p&gt;The vision is not a rack of ordinary CPUs using Hadoop to manage them; the vision is a rack of CPU+GPU combinations where you can take advantage of parallelization both between machines and on the machine.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>